# Copyright 2016 47Lining LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Test that the instance was running and got included in the group
  fail:
    msg="Make sure your bakery instance is in the 'running' state before running publish"
  when: groups['MATCH_NUCLEATORGROUP__' ~ bakery_group] is not defined

- name: Set hosts to image
  set_fact:
    targets: "{{ groups['MATCH_NUCLEATORGROUP__' ~ bakery_group] | intersect(groups[ 'MATCH_NUCLEATORSTACKSETINSTANCE__' ~ cli_stackset_instance_name]) }}"
    # all instances are in same region, simplify and determine once

- name: Log hosts to image
  debug:
    msg: "{{targets}}"

- name: Set instance region
  set_fact:
    instance_region: "{{hostvars[targets[0]]['ec2_region']}}"

- name: Log instance region
  debug:
    msg: "{{instance_region}}"

- name: Stop the instance
  ec2:
    instance_ids: "{{hostvars[targets[0]]['ec2_id']}}"
    region: '{{ instance_region }}'
    state: stopped
    wait: True

# TODO - once we get off the forked Ansible 1.9.4 and have access
# to modules/extras/cloud/amazon we can use ec2_remote_facts:

- name: Ensure instance is in a stopped state.
  shell: "aws ec2 describe-instances --instance-id {{hostvars[item]['ec2_id']}} --region {{instance_region}} --output json"
  register: instance_state
  until: 'instance_state.rc == 0 and instance_state.stdout.lower().find(''"name": "stopped"'') > -1'
  retries: "{{instance_state_check_retries}}"
  delay: "{{instance_state_check_delay}}"
  with_items: targets

- name: Create AMIs
  shell: "aws ec2 create-image --instance-id {{hostvars[item]['ec2_id']}} --region {{instance_region}} --no-reboot --name '{{ ami_name }}' --output json"
  register: create_image
  with_items: targets

- name: log ami creation output
  debug:
    msg: "{{ create_image }}"

- name: get list of ami-ids from create-image output
  set_fact:
    ami_ids: "{{ create_image.results | map(attribute='stdout') | list | map('from_json') | map(attribute='ImageId') | list }}"

- name: log ami-ids
  debug:
    msg: "{{ ami_ids }}"

- name: Wait for all AMIs to be available.
  shell: 'aws ec2 describe-images --image-id {{item}} --region {{instance_region}} --output json'
  register: ami_info
  until: 'ami_info.rc != 0 or (ami_info.rc == 0 and ami_info.stdout.lower().find(''"state": "available"'') > -1)'
  retries: "{{instance_state_check_retries}}"
  delay: "{{instance_state_check_delay}}"
  with_items: ami_ids

- name: log ami info
  debug:
    msg: "{{ ami_info }}"

