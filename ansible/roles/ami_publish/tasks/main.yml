---

- name: Set hosts to image
  set_fact:
    targets: "{{ groups['MATCH_NUCLEATORGROUP__' ~ bakery_group] | intersect(groups[ 'MATCH_NUCLEATORSTACKSETINSTANCE__' ~ cli_stackset_instance_name]) }}"

- name: Log hosts to image
  debug: msg="{{targets}}"

- name: Ensure instance is in a stopped state.
  shell: "aws ec2 describe-instances --instance-id {{hostvars[item]['ec2_id']}} --region {{hostvars[item]['ec2_region']}} --output json"
  register: instance_state
  until: 'instance_state.rc == 0 and instance_state.stdout.lower().find(''"name": "stopped"'') > -1'
  retries: "{{instance_state_check_retries}}"
  delay: "{{instance_state_check_delay}}"
  with_items: targets

- name: Create AMIs
  shell: "aws ec2 create-image --instance-id {{hostvars[item]['ec2_id']}} --region {{hostvars[item]['ec2_region']}} --no-reboot --name '{{ ami_name }}' --output json"
  register: instance_ami
  with_items: targets

- name: log ami creation output
  debug: msg="{{ instance_ami.stdout | from_json }}"

- name: Wait for our AMI to be 'available'.
  shell: 'aws ec2 describe-images --image-id {{ami_object.ImageId}} --region {{host_ec2_region}} --output json'
  register: ami_info
  until: 'ami_info.rc == 0 and ami_info.stdout.lower().find(''"state": "available"'') > -1'
  retries: "{{instance_state_check_retries}}"
  delay: "{{instance_state_check_delay}}"
  with_items: targets

- name: log ami info
  debug: msg="{{ ami_info.stdout | from_json }}"
  
